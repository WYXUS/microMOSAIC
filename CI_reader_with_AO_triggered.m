%{
    Acquire some signals using NIDAQ-mx's .NET assembly
%}

clear all


% Load NIDAQmx .NET assembly
fprintf('Starting up: loading DAQmx...\n')
try
    NET.addAssembly('NationalInstruments.DAQmx');
    import NationalInstruments.DAQmx.*
    fprintf('Assembly successfully loaded!\n')
catch
    error('Error loading .NET assembly! Check NIDAQmx .NET installation.')
end
f = figure
XCenter = 0; YCenter = 0;       % image center
dutyCycle = 0.9;        % duty cycle of the pulse generator
pixDwellTime = 2;       % microseconds
pixFreq = 1 / (pixDwellTime / 1000000 * 2);       % pixel acquisition frequency
pixRep = 5 ;       % pixel repetition 
scanXRange = 100;   % scan range X, um
scanYRange = 100;   % scan range Y, um
scanStep = 0.1;       % scan step, um
calibration = 0.0220;  % um to V conversion coefficient
% numberofPoints = scanXRange*scanYRange/ scanStep / scanStep;    % total number of points
x = -scanXRange/2:scanStep:scanXRange/2;        % x coordinates
y = -scanYRange/2:scanStep:scanYRange/2;        % y corrdiantes
numberofPoints = length(x)*length(y);
x = x + XCenter;    % x coordinates corrected with the image center
y = y + YCenter;    % y coordinates corrected with the image center
[X,Y] = meshgrid(x,y);
% coordPoints = [X(:)*calibration, Y(:)*calibration];    % voltages to send to the galvos
coordPoints = [repelem(X(:)*calibration,pixRep), repelem(Y(:)*calibration, pixRep)];    % voltages to send to the galvos
                           
% Setting up device objects
AOtask = NationalInstruments.DAQmx.Task;        % a task to control the galvos
AOtask.AOChannels.CreateVoltageChannel('/Dev1/ao0:1', '',-10, 10, AOVoltageUnits.Volts);    % output channels: the galvos
% AOtask.Stream.WriteRegenerationMode = WriteRegenerationMode.AllowRegeneration;
AOtask.Timing.ConfigureSampleClock('',pixFreq, SampleClockActiveEdge.Rising, SampleQuantityMode.FiniteSamples, pixRep*numberofPoints)    % a clock

AOtask.Control(TaskAction.Verify)   % check for task errors

AOwriter = AnalogMultiChannelWriter(AOtask.Stream);     % create a writer


% produce square pulses with ctr0, because PFI8 doesn't have a bnc connector
COtask = NationalInstruments.DAQmx.Task;        % a task to generate quare pulses with 'pixFreq' and 'dutyCycle'
COtask.COChannels.CreatePulseChannelFrequency('/Dev1/ctr0', '', COPulseFrequencyUnits.Hertz, COPulseIdleState.Low, 0, pixFreq, dutyCycle ); %delay, freq, dutycycle
COtask.Timing.ConfigureImplicit(SampleQuantityMode.FiniteSamples,pixRep*numberofPoints)
COtask.Triggers.ArmStartTrigger.ConfigureDigitalEdgeTrigger('/Dev1/ao/StartTrigger',DigitalEdgeArmStartTriggerEdge.Rising);   % set a trigger. The generation starts when the output writer(galvos) start writing
% COtask.Triggers.ArmStartTrigger.Type = ArmStartTriggerType.DigitalEdge;
% COtask.Triggers.ArmStartTrigger.DigitalEdge.Source='/Dev2/ao/StartTrigger';
% COtask.Triggers.ArmStartTrigger.DigitalEdge.Edge = DigitalEdgeArmStartTriggerEdge.Rising;

COtask.Control(TaskAction.Verify)       % check for errors
%
%meas pulse width with ctr2 @ PFI0
CItask = NationalInstruments.DAQmx.Task;        % task for width measurement of the square pulses generated by COtask
CIch = CItask.CIChannels.CreatePulseWidthChannel('/Dev1/ctr3', 'CItask',0,2^32-1,CIPulseWidthStartingEdge.Rising,CIPulseWidthUnits.Ticks);
% CIch = CItask.CIChannels.CreateCountEdgesChannel ('/Dev2/ctr2', 'CItask',CICountEdgesActiveEdge.Rising,int64(0),CICountEdgesCountDirection.Up);
CIch.PulseWidthTerminal = '/Dev1/PFI12';        % a terminal, where square pulses are produced by COtask
CIch.CounterTimebaseSource = '/Dev1/PFI0';      % a terminal, where a detector is connected

CItask.Timing.ConfigureImplicit(SampleQuantityMode.FiniteSamples,pixRep*numberofPoints);   % clock
CIreader = CounterSingleChannelReader(CItask.Stream);       % start in the background: it doesn't start before COtask and AOtask 

COtask.Start()      % start the square pulse production: doesn't start before AOtask
CItask.Start()  % start in the background

AOtask.Stream.Timeout=-1;
COtask.Stream.Timeout=-1;
CItask.Stream.Timeout=-1;


AOwriter.WriteMultiSample(true,coordPoints');   % write voltages to a galvo: triggers the aquisition
try
rawData = double(CIreader.ReadMultiSampleDouble( pixRep*numberofPoints)); % get the data from the buffer
data = arrayfun(@(i) mean(rawData(i:i+pixRep-1)),1:pixRep:length(rawData)-pixRep+1)';   % average pixRep
size = round(sqrt(length(data)));       % define size
imagesc(reshape(data,[size,size])) ;colorbar ;  % reshape to 2D and display
title(['Dwell Time = ' num2str(pixDwellTime) ' Pixel Rep = ' num2str(pixRep)])
axis image;
catch ME
    disp(ME.message)

end


%%
% delete(AIlistener);
AOtask.Stop()
AOtask.Dispose()
CItask.Stop()
CItask.Dispose()
COtask.Stop()
COtask.Dispose()
clear all